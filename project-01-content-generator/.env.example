# =============================================================================
# AI CONTENT GENERATOR - ENVIRONMENT CONFIGURATION
# =============================================================================
# DOCKER COMPOSE ENVIRONMENT VARIABLE PRECEDENCE (Highest → Lowest Priority)
#
# 1. Command-line arguments (highest)
#    docker compose run -e OPENAI_API_KEY=sk-xxx backend
#
# 2. Shell environment variables
#    export OPENAI_API_KEY=sk-xxx && docker compose up
#
# 3. Environment defined in docker-compose.yml (hardcoded - NOT RECOMMENDED for secrets!)
#    environment:
#      - OPENAI_API_KEY=hardcoded-value
#
# 4. Environment from shell via ${VAR} substitution in docker-compose.yml
#    environment:
#      - OPENAI_API_KEY=${OPENAI_API_KEY}
#
# 5. .env file (lowest - recommended for development)
#    OPENAI_API_KEY=sk-xxx
#
# 6. Default values in docker-compose.yml
#    - OPENAI_API_KEY=${OPENAI_API_KEY:-demo-key}
#
# =============================================================================
# BEST PRACTICES BY ENVIRONMENT
# =============================================================================
#
# DEVELOPMENT (Recommended):
#   → Use .env file (this file) - keep it simple, per-project keys
#   → Never commit .env to git (already in .gitignore)
#   → Clear shell vars before starting: unset OPENAI_API_KEY ANTHROPIC_API_KEY
#   → Start containers: docker compose up -d
#
# STAGING/PRODUCTION (Recommended):
#   → Use platform environment variables (Google Cloud Run, AWS ECS, Kubernetes)
#   → Use secrets management (Docker Secrets, Kubernetes Secrets, AWS Secrets Manager)
#   → Use CI/CD with environment-specific .env files: docker compose --env-file .env.production up
#
# NEVER:
#   → Hardcode keys in docker-compose.yml
#   → Commit .env files to git
#   → Set permanent shell environment variables (causes precedence confusion)
#
# =============================================================================
# QUICK START FOR DEVELOPMENT
# =============================================================================
# 1. Copy this file to .env:
#    cp .env.example .env
#
# 2. Edit .env with your actual API keys
#
# 3. Start containers (clear shell vars first to avoid precedence issues):
#    unset OPENAI_API_KEY ANTHROPIC_API_KEY SERPER_API_KEY
#    docker compose up -d
#
# =============================================================================

# API KEYS (Required for AI functionality)
OPENAI_API_KEY=your-openai-api-key-here
SERPER_API_KEY=your-serper-api-key-here
ANTHROPIC_API_KEY=your-anthropic-api-key-here

# LLM Model Configuration
# Default: gpt-4o-mini (low-latency, cost-optimized OpenAI model)
# Other options: gpt-4o, gpt-4.1, gpt-4.1-mini, gpt-3.5-turbo
LLM_MODEL=gpt-4o-mini

# Anthropic Model Configuration (used if ANTHROPIC_API_KEY is set and OPENAI_API_KEY is not)
# Options: claude-3-haiku-20240307, claude-3-sonnet-20240229, claude-3-opus-20240229
ANTHROPIC_MODEL=claude-3-haiku-20240307

# Application Settings
PORT=8000
DEBUG=true

# APPLICATION SETTINGS (Docker + Cloud Run)
# Cloud Run overrides PORT automatically
ENVIRONMENT=production       # production = stable, development = hot reload

# CORS SETTINGS (Important for frontend integration)
CORS_ALLOW_ORIGINS=http://localhost:3000  # Override with comma-separated list for production

# DEMO MODE (Automatic fallback when no API keys detected)
# No configuration needed - system auto-detects API key validity and enables demo mode

# =============================================================================
# GOOGLE CLOUD RUN DEPLOYMENT COMMANDS
# =============================================================================
# Deploy backend only:
# gcloud run deploy content-generator \
#   --source . \
#   --set-env-vars OPENAI_API_KEY=your-key,SERPER_API_KEY=your-key \
#   --region us-central1 \
#   --allow-unauthenticated
#
# Deploy with custom domain:
# gcloud run deploy content-generator \
#   --source . \
#   --set-env-vars OPENAI_API_KEY=your-key,SERPER_API_KEY=your-key,CORS_ALLOW_ORIGINS=https://yourdomain.com \
#   --region us-central1
